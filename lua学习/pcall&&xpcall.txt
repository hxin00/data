pcall和xpcall、debug
lua中处理错误，可以使用函数pcall(protected call)来包装需要执行的代码。
pcall接受一个函数和要传递给后者的参数，并执行，执行结果：有错误、无错误；返回true,返回值或者false,errorinfo.
用法如下：
pcall(func, ...)  // ...：参数

pcall以一种“保护模式”来调用第一个参数，一次pcall可以捕获函数执行中的任何错误。
通常在错误发生时，希望获得更多的调试信息，而不只是发生错误的位置。但pcall返回时，它已经销毁了调用栈的部分内容。
lua提供了xpcall函数，xpcall接收第二个参数—一个错误处理函数，当错误发生时，lua会在调用栈展开前调用错误处理信息，于是就可以在这个
函数中使用debug库来获取关于错误的额外信息了。
debug库提供了两个通用的错误处理函数：
debug.debug：提供一个lua提示符，让用户来检查错误的原因
debug.traceback：根据调用栈来构建一个扩展的错误信息

xpcall用法如下：
xpcall(func, error, ...)  // error：错误处理函数；...：参数