1.load：用于加载字符串代码块（lua5.2版本后代替loadstring）
用法：load(chunk, chunkname, mode, env)
chunk：字符串代码块
chunkname：模块名，默认是“chunk”,当使用assert函数报错后会被打印出来
mode：文件类型：“b”:二进制；“t”:文本文件；“bt”:同时兼容二进制和文本文件，不填默认是“bt”
env：环境变量，不填默认会用_ENV填充，附带lua标准类库
例子：
a = 100
--加载字符串代码块
f = assert(load("a = a + 100"))
print("before a = "..a)
--运行代码块
f()
print("after  a = "..a)
输出结果：
before a = 100
after  a = 200

2.loadfile：用于加载一个指定路径filename的代码块。
用法：loadfile(filename, mode, env)
filename：文件的加载路径，要包含文件后缀
mode：文件类型：“b”:二进制；“t”:文本文件；“bt”:同时兼容二进制和文本文件，不填默认是“bt”
env：环境变量，不填默认会用_ENV填充，附带lua标准类库
例子：
--LuaFunc.lua
function add(x, y)
    return x + y
end
 
m = "LuaFunc.m"
local n = "n"
 
print("------------------ < LuaFunc.lua > ------------------")
print("m = "..m)
print("n = "..n)
print("------------------ < LuaFunc.lua > ------------------")

调用代码：
--加载并编译代码
f = assert(loadfile("Child/LuaFunc.lua"))
--运行
f()
print("add : "..add(100, 88))
print(m)

输出结果：
------------------ < LuaFunc.lua > ------------------
m = LuaFunc.m
n = n
------------------ < LuaFunc.lua > ------------------
add : 188
LuaFunc.m

3.dofile：用于加载一个指定路径filename的代码块，并运行。
用法：dofile(filename)
filename：文件加载路径，要包含文件后缀
例子：
dofile("Child/LuaFunc.lua")
print("add : "..add(100, 88))
print(m)

输出结果：同上

4.require：用于加载一个指定的代码块，并运行。
用法：require(modname)
modname：文件名，不包含后缀
这个函数对于同一个代码块只会加载一次（加载过会保存起来），和dofile类似，加载编译后也会自动运行
例子：
--加载编译并运行
require("Child/LuaFunc") -- 等同于：require("Child.LuaFunc")
print("add : "..add(100, 88))
print(m)

输出结果：同上